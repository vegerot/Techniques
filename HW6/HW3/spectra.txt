
                          IRAF TUTORIAL SESSIONS

                                Exercise 5.


In this exercise we will continue processing the spectroscopic data that
was processed through the preliminary reduction phase using CCDPROC 
(including the response and illumination corrections) in Exercise 3.  This
exercise will lead you through the extraction of the spectra to 1-d, the
wavelength calibration of the arc spectra, and then finally applying this
information to our extracted stellar spectra.

We will assume that you are logged into IRAF in an xgterm window, or a similar
graphics terminal emulator window.

Go to your spec subdirectory in your A303_HW4 directory.

The data that we will work with at this time are sp0018-sp0027.  Are the
data there?  Check to be sure the images have been reduced - do you remember
how to check that?

          cl> ls
          cl> imhead sp*.fits
          cl> imhead sp0018 l+        # what do you want to look for here?

These are the images that we will be working with.

cl> imhead sp*.fits l-
sp0018.imh[41,1022][real]: comp 6707 start of night
sp0020.imh[41,1022][real]: DHCep 6707
sp0021.imh[41,1022][real]: DHCep 6707
sp0022.imh[41,1022][real]: DHCep 6707
sp0023.imh[41,1022][real]: AHCep 6707
sp0024.imh[41,1022][real]: AHCep 6707
sp0025.imh[41,1022][real]: AHCep 6707
sp0027.imh[41,1022][real]: comp 6707


EXTRACTING THE DATA
-------------------

The first thing we need to do is extract the data to 1-d spectra, both
the objects and the arcs.  If we wanted to leave the data as 2-d data
then the problem would be approached in a different way, using tasks in
the NOAO.TWODSPEC.LONGSLIT package.  Let's load the appropriate packages.

          cl> imred
          cl> kpnoslit

Our first task is to determine the parameters for the task APALL, the task we
will use to do the extraction of the spectra.  We need to determine a
profile centering width that is the number of pixels used to determine the
center of the profile during the centering and tracing of the profile along
the dispersion direction; this is usually set to near the width of the profile.
Keep in mind that here, the "profile" is in the spatial direction,
perpendicular to the dispersion direction. (In the data files used for this
exercise, the dispersion direction is along the columns, do you'll be
measuring the width of the spatial profile along a row.)

          cl> display sp0020
          cl> imexamine              # measure the width of the profile using
                                       the "l" key - place the cursors on one
                                       side of the profile at about the 50
                                       count level - press "x" - move the 
                                       cursor to the other side - press "x"
                                       again (may need to press twice) 

          Record the cursor output at the two locations on either side of the
          maximum where the counts ~ 50 (it may not be possible to find a
          location where counts == 50)
    
          Record this initial estimate of the width in spectra_notes.txt

          [you may want to plot some different lines as well to see how
           consistent the profile is and how much distortion there is in
           the spectrum]

          [when you have decided on a good value of the profile radius quit
           implot with q]

          Record at least 3 other estimates of the profile width found
          using the technique above in spectra_notes.txt. One of those
          estimates should come from another position along the dispersion axis
          in this image, sp0020. The other two should come from two postions
          along the dispersion axis in another file, sp20024. 

          Record the average width from these 4 separate estimates 
          This will be your width for the APALL task. Choose a radius 
          that is about width+4. 
         

Many IRAF packages have parameter files like IRAF tasks.  The package 
parameters are generally used across the board for all tasks in that package. 
Look at the parameters for the KPNOSLIT package.  For our data set, there is no
need to modify any of these parameters.

cl> lpar kpnoslit
  (extinction = "onedstds$kpnoextinct.dat") Extinction file
      (caldir = "onedstds$spec50cal/") Standard star calibration directory
 (observatory = "observatory")  Observatory of data
      (interp = "poly5")        Interpolation type
    (dispaxis = 2)              Image axis for 2D/3D images
        (nsum = "1")            Number of lines/columns/bands to sum for 2D/3D 
    (database = "database")     Database
     (verbose = no)             Verbose output?
     (logfile = "logfile")      Log file
    (plotfile = "")             Plot file\n
     (records = "")             Record number extensions
     (version = "KPNOSLIT V3: January 1992") 
        (mode = "ql")           
      ($nargs = 0)        

The next step is to edit the parameters for APALL until they resemble the
parameter file below.  There are many ways to vary the extraction algorithms
to get the best results for your data.  Our list of input images will be
an @file containing a list of our stellar images only.  We will use many 
of the defaults except for a few:  let's turn off the extras parameter, set
b_order=2 (a straight line fit for the background subtraction rather than a
constant), set b_naver=-10 (that way a median value will be determined for
each of our background samples before they are fit with the straight line), 
type Ctrl/N to go to the next page of the parameter list, set the width=6 (at 
least that is what I decided from our runs with implot earlier), set nfind=1 
(we only want to initially find 1 peak), and set background=fit.

        cl> cp list.spec list.extract 
        cl> emacs list.extract        # remove any files except sp0020-sp0025

        cl> unlearn apall
        cl> epar apall                # set parameters
            :q                        # save the parameters

Note: replace AVGWIDTH and AVGWIDTH+4 with the values you found above.     
cl> lpar apall | page
        input = "@list.extract" List of input images
        nfind = 1               Number of apertures to be found automatically
      (output = "")             List of output spectra
   (apertures = "")             Apertures
      (format = "multispec")    Extracted spectra format
  (references = "")             List of aperture reference images
    (profiles = "")             List of aperture profile images\n
 (interactive = yes)            Run task interactively?
        (find = yes)            Find apertures?
    (recenter = yes)            Recenter apertures?
      (resize = yes)            Resize apertures?
        (edit = yes)            Edit apertures?
       (trace = yes)            Trace apertures?
    (fittrace = yes)            Fit the traced points interactively?
     (extract = yes)            Extract spectra?
      (extras = no)             Extract sky, sigma, etc.?
      (review = yes)            Review extractions?\n
        (line = INDEF)          Dispersion line
        (nsum = 10)             Number of dispersion lines to sum\n\n# DEFAULT 
       (lower = -5.)            Lower aperture limit relative to center
       (upper = 5.)             Upper aperture limit relative to center
   (apidtable = "")             Aperture ID table (optional)\n\n# DEFAULT BACKG
  (b_function = "chebyshev")    Background function
     (b_order = 2)              Background function order
    (b_sample = "-10:-6,6:10")  Background sample regions
  (b_naverage = -10)            Background average or median
  (b_niterate = 0)              Background rejection iterations
(b_low_reject = 3.)             Background lower rejection sigma
(b_high_rejec = 3.)             Background upper rejection sigma
      (b_grow = 0.)             Background rejection growing radius\n\n# APERTU
       (width = AVGWIDTH)             Profile centering width
      (radius = AVGWIDTH+4)           Profile centering radius
   (threshold = 0.)             Detection threshold for profile centering\n\n# 
      (minsep = 5.)             Minimum separation between spectra
      (maxsep = 1000.)          Maximum separation between spectra
       (order = "increasing")   Order of apertures\n\n# RECENTERING PARAMETERS\n
  (aprecenter = "")             Apertures for recentering calculation
      (npeaks = INDEF)          Select brightest peaks
       (shift = yes)            Use average shift instead of recentering?\n\n#
      (llimit = INDEF)          Lower aperture limit relative to center
      (ulimit = INDEF)          Upper aperture limit relative to center
      (ylevel = 0.1)            Fraction of peak or intensity for automatic wid
        (peak = yes)            Is ylevel a fraction of the peak?
         (bkg = yes)            Subtract background in automatic width?
      (r_grow = 0.)             Grow limits by this factor
   (avglimits = no)             Average limits over all apertures?\n\n# TRACING
      (t_nsum = 10)             Number of dispersion lines to sum
      (t_step = 10)             Tracing step
     (t_nlost = 3)              Number of consecutive times profile is lost bef
  (t_function = "legendre")     Trace fitting function
     (t_order = 2)              Trace fitting function order
    (t_sample = "*")            Trace sample regions
  (t_naverage = 1)              Trace average or median
  (t_niterate = 0)              Trace rejection iterations
(t_low_reject = 3.)             Trace lower rejection sigma
(t_high_rejec = 3.)             Trace upper rejection sigma
      (t_grow = 0.)             Trace rejection growing radius\n\n# EXTRACTION 
  (background = "fit")          Background to subtract
      (skybox = 1)              Box car smoothing length for sky
     (weights = "none")         Extraction weights (none|variance)
        (pfit = "fit1d")        Profile fitting type (fit1d|fit2d)
       (clean = no)             Detect and replace bad pixels?
  (saturation = INDEF)          Saturation level
   (readnoise = "0.")           Read out noise sigma (photons)
        (gain = "1.")           Photon gain (photons/data number)
      (lsigma = 4.)             Lower rejection threshold
      (usigma = 4.)             Upper rejection threshold
     (nsubaps = 1)              Number of subapertures per aperture
        (mode = "ql")    

Now we are ready to extract our stellar spectra.

        cl> apall

        [press "return" to all questions]

        [we are now presented with a profile plot for our first star - the
         center and the extraction aperture, automatically determined when
         we answered "yes" to the resize question, have been marked]

            ?                  # for a list of cursor options
            b                  # go into background fitting mode

        [the default backgrounds are marked but they are not very good - we
         should move them further away from the star]

            ?                  # for a list of cursor options in this mode
            t                  # initialize the background regions
            s                  # mark the left boundary of the first new
                                 background region
            s                  # mark the right boundary of the first new
                                 background region
            s                  # mark the left boundary of the second new
                                 background region
            s                  # mark the right boundary of the second new
                                 background region
            f                  # fit the new background
            :sample            # print out the sky regions being used

        [you should now have one background sample region on either side
         of the profile of about 6 pixels or so each - notice the fit
         extended under the star - also notice the median points in each
         sample region (the small plus sign may be difficult to see) - redo 
         the procedure above if you are not happy with your sky background]

            q                  # quit the background fitting routine

        [once we have decided that the aperture size, the center and the
         background are ok, we can move onto the tracing routine.  The next
         step is to trace the profile of the star along the dispersion axis.
         We are again in the ICFIT routine (remember the RESPONSE and 
         ILLUMINATION tasks?]

            q

        [answer yes to all questions - you will now be presented with a plot
         of the profile centers versus the line number.  Notice the fitting
         parameters at the top of the plot.  We can adjust the fit if you
         would like, although the current fit looks quite good.]

            :func spline3
            :order 3
            :niter 1
            f
           
            q                  # quit tracing mode and move onto extraction

        [answer yes to all questions - now you will see a plot of the 
         extracted spectrum - notice the cosmic rays - another option
         during the extraction process is to clean the spectrum but we
         did not choose that option]

            q                  # go to next spectrum

        [we will now step through the remaining stars - each will be processed
         in a similar manner - note the previous background regions have not
         been remembered so you will need to set these for each star - the
         previous fitting parameters for the tracing are remembered however]

Our stellar spectra have now been extracted to 1-d images.  The headers
have been updated with a more complex set of header keywords as well.  And
all of the extraction information has been saved in individual files in
a database directory.

        cl> ls
        cl> imhead *.ms*                # list the newly extracted spectra
        cl> imhead sp0025.ms l+ | page  # see the long header  
        cl> ls database
        cl> page database/apsp0021

Now we need to extract the two arc spectra to 1-d.  But this process is done
differently than for the star.  We can not trace the arcs since there is no
continuum, and we need to be sure we do not do any background subtraction or
we will end up with nothing in our output spectrum.  Why?  So we will use
a "reference" image to extract the arcs.  In other words, we will use one
of the database files created earlier when we extracted our stars.  To simplify
things we will use one reference star to extract both arcs.  But users
may want to be more particular about this procedure if they are doing radial
velocity work - you may want to then extract each arc using the reference
for each star.  As in APALL, there are many options. 
 
Let's use the task APSUM to extract the arc spectra; we could have just as
easily edited the parameters for APALL but I do not want to disturb your
parameters in that task.  So edit the parameters for APSUM until they resemble
those below.
 
        cl> unlearn apsum
        cl> epar apsum

cl> lpar apsum
        input = "sp0018,sp0027" List of input images
      (output = "")             List of output spectra
   (apertures = "")             Apertures
      (format = "multispec")    Extracted spectra format
  (references = "sp0025")       List of aperture reference images
    (profiles = "")             List of aperture profile images\n
 (interactive = no)             Run task interactively?
        (find = no)             Find apertures?
    (recenter = no)             Recenter apertures?
      (resize = no)             Resize apertures?
        (edit = no)             Edit apertures?
       (trace = no)             Trace apertures?
    (fittrace = no)             Fit the traced points interactively?
     (extract = yes)            Extract apertures?
      (extras = no)             Extract sky, sigma, etc.?
      (review = yes)            Review extractions?\n
        (line = INDEF)          Dispersion line
        (nsum = 10)             Number of dispersion lines to sum\n
  (background = "none")         Background to subtract (none|average|fit)
     (weights = "none")         Extraction weights (none|variance)
        (pfit = "fit1d")        Profile fitting type (fit1d|fit2d)
       (clean = no)             Detect and replace bad pixels?
      (skybox = 1)              Box car smoothing length for sky
  (saturation = INDEF)          Saturation level
   (readnoise = "0.")           Read out noise sigma (photons)
        (gain = "1.")           Photon gain (photons/data number)
      (lsigma = 4.)             Lower rejection threshold
      (usigma = 4.)             Upper rejection threshold
     (nsubaps = 1)              Number of subapertures per aperture
        (mode = "ql")

        cl> apsum
        cl> imhead *.ms.fits l-
        cl> display sp0018.ms         # check arc extractions
        cl> imexamine                 # plot the single line in the image

The APALL task is a combination of many of the aperture extraction tasks
that you see in this package, APEDIT, APFIND, APRESIZE, APRECENTER, APTRACE, 
and APSUM.  A study of these help pages is recommended before doing serious
spectral extractions.


WAVELENGTH CALIBRATION
----------------------

We are now ready to determine a wavelength calibration for our arc lamps.
A chart of the lines in the spectrum is in the file 
/data/ASTR303/HW4/spec.pdf

> evince spec.pdf   #displays the pdf you need

We will use the tasks IDENTIFY and REIDENTIFY.  

        cl> unlearn identify reidentify
        cl> display sp0027.ms
        cl> imexamine

Note the line width you find in spectra_notes.txt.

Now we are ready to run the task IDENTIFY.  The default profile radius
may work fine for these data.  The only parameter that we
need to modify is the coordlist - set this to "linelists$thorium.dat".
When we exit IDENTIFY the wavelength solution will be saved in a database.

        cl> lpar identify
        cl> epar identify
        cl> identify sp0027.ms
            ?                          # review cursor options for IDENTIFY
            w                          # enter the window cursor options
            ?                          # look at the options
            w
            f                          # flip the data so increasing wavelength
                                         runs to the right 

        [mark 5 strong features on the plot spanning the spectrum - point the
         cursor, type "m", then type in the wavelength.  If the terminal
         beeps at you it can not find the line center - on a crowded spectrum
         like this it may be necessary to window the plot around the line
         you wish to identify - use "w" followed by "e" at the lower left
         corner of the box you wish to expand and then "e" at the top right
         edge of the box - type "w" followed by "a" to go back to the full
         plot]
 
            f                          # fit the lines and enter ICFIT
            ?                          # look at cursor options
            :func cheby                # change function
            :order 3                   # set to quadratic
            f                          # refit
            q                          # go back to IDENTIFY
            w                          # to get spectrum back if it is not
            a                            there
            l                          # to find other lines from thorium.dat
                                         file
            f                          # fit the lines and enter ICFIT
            :nite 2                    # iterate the solution to remove bad
                                         lines
            f                          # refit
            d                          # delete a few other outliers by pointing
                                         the cursor and typing "d"
            f                          # redo fit
            q                          # go back to IDENTIFY
            .                          # print line id
            d                          # delete other poor lines - we should
                                         be able to get a solution with an
                                         RMS=~0.01 A in ICFIT
            f                          # redo fit - see RMS value at the end of
                                         the 3rd line at the top of the plot
            l                          # look at the fit of the non-linear
                                         components
            q                          # go back to IDENTIFY
            q                          # quit IDENTIFY when you are happy with
                                         the fit - be sure to save it!

        cl> dir database               # the solution is saved in the 
                                         idsp0027.ms file
        cl> page database/idsp0027.ms

Now we can run REIDENTIFY on our other arc spectrum using sp0027.ms as our
reference image.

        cl> reidentify sp0027.ms sp0018.ms coord=linelists$thorium.dat v+ inter+
         
        [or do epar followed by a :go - you will have the option of reviewing
         the fit with IDENTIFY]

        cl> imhead sp0027.ms l+

Notice the keyword refspec1 set to the name of the image itself.  This keyword
was added by IDENTIFY/REIDENTIFY and defines the arcs as "reference images".
The next task, REFSPECTRA, assigns "reference images" to our object frames,
allowing us to select various ways for determining these assignments.  For
this data set we should assign the arcs by the UT time at the middle of the
exposure.  This value is not in our image headers so we will need to put it
there with the task SETAIRMASS.  SETAIRMASS expects certain information to
compute this value but we are fortunate that that information is already in
our headers!

        cl> hselect sp*.ms.fits $I,ut,exptime yes
        cl> lpar setairmass
        cl> setairmass sp*.ms.fits update-
        cl> setairmass sp*.ms.fits
        cl> imhead sp0027.ms l+

Now edit the parameters for REFSPECTRA so they look like those below.
REFSPECTRA will then assign reference spectra and their weights based on the
utmiddle value to our object frames and add this information to our image 
headers.

        cl> epar refspectra

cl> lpar refspectra
        input = "sp*.ms.fits"    List of input spectra
       answer = "no"            Accept assignment?
  (references = "sp*.ms.fits")   List of reference spectra
   (apertures = "")             Input aperture selection list
      (refaps = "")             Reference aperture selection list
   (ignoreaps = yes)            Ignore input and reference apertures?
      (select = "interp")       Selection method for reference spectra
        (sort = "utmiddle")     Sort key
       (group = "")             Group key
        (time = yes)            Is sort key a time?
    (timewrap = 17.)            Time wrap point for time sorting
    (override = no)             Override previous assignments?
     (confirm = yes)            Confirm reference spectrum assignments?
      (assign = yes)            Assign the reference spectra to the input spect
    (logfiles = "STDOUT,logfile") List of logfiles
     (verbose = no)             Verbose log output?
        (mode = "ql")      

        cl> refspectra          # answer "yes" or "YES" - what's the difference?*
        cl> imhead sp0025.ms l+ # note the new keywords

*note your response in spectra_notes.txt

The task that actually applies the wavelength calibration to our data is the
task DISPCOR.  It uses the refspec keyword information in the header to
determine what arcs to use to apply the solution.

Edit the parameters for DISPCOR so they resemble those below.  We will linearize
the data, which means the data is rebinned so each pixel has the same delta
lambda; if we chose not to linearize then the data values would be unaltered
and the coefficients for the solution would be stored in the image header.  We
set global=yes so all frames will have the same starting wavelength and
wavelength increment.  We will run the task first with listonly=yes.

        cl> epar dispcor

cl> lpar dispcor
        input = "sp*.ms.fits"    List of input spectra
       output = "%sp%l%*.ms.fits" List of output spectra  
   (linearize = yes)            Linearize (interpolate) spectra?
    (database = "database")     Dispersion solution database
       (table = "")             Wavelength table for apertures
          (w1 = INDEF)          Starting wavelength
          (w2 = INDEF)          Ending wavelength
          (dw = INDEF)          Wavelength interval per pixel
          (nw = INDEF)          Number of output pixels
         (log = no)             Logarithmic wavelength scale?
        (flux = yes)            Conserve flux?
    (samedisp = no)             Same dispersion in all apertures?
      (global = yes)            Apply global defaults?
   (ignoreaps = no)             Ignore apertures?
     (confirm = yes)            Confirm dispersion coordinates?
    (listonly = yes)            List the dispersion coordinates only?
     (verbose = yes)            Print linear dispersion assignments?
     (logfile = "")             Log file
        (mode = "ql")           

        cl> dispcor

Now let's do it for real.  Type "NO" when queried about changing assignments.

        cl> dispcor listonly-
        cl> imhead l0025.ms l+

Note what the entry for "List of output spectra" in the DISPCOR task above
accomplishes in your spectra_notes.txt file

Congratulations!  You have done it!  Now you can play with this data.

        cl> splot l0025.ms          # welcome to the world of SPLOT - now
                                      that you are experienced IRAF users
                                      check out this very versatile analysis
                                      tool!
        cl> specplot l0020.ms,l0021.ms,l0022.ms

Since the oberver took 3 frames of each spectrum it may be that he planned
to combine them in such a way as to eliminate the cosmic rays.

        cl> scombine l0020.ms,l0021.ms,l0022.ms spec1 combine=median scale=mode
        cl> splot spec1
            o                        # overplot original spectra
            g
            l0020.ms
            o
            g
            l0021.ms
            o
            g
            l0022.ms
            g
            spec1
            q

Note that SPLOT has cursor keys for cleaning bad pixels as well.  Look at
the line measuring cursor keys in SPLOT too.  Experiment!

-------------------------------------------------------------------------------

                                 References

A User's Guide to Reducing Slit Spectra with IRAF, by Phil Massey, Frank
Valdes, and Jeannette Barnes, April 1992. 

Online help is available for all tasks.  Especially see
"phelp onedspec.package" and "phelp onedspec.specwcs".

See "phelp doslit" for doing it all in one big gulp, and better too, since
it extracts the arcs for each stellar spectrum.

-------------------------------end of exercise---------------------------------
